/*
========================================================================================================
    Config file for defining DSL2 per module options and publishing paths
========================================================================================================
    Available keys to override module options:
        ext.args            = Additional arguments appended to command in module.
        ext.args2           = Second set of arguments appended to command in module (multi-tool modules).
        ext.args3           = Third set of arguments appended to command in module (multi-tool modules).
        ext.prefix          = File name prefix for output files.
---------------------------------------------------------------------------------------------------------
*/

//
// Generic process options for all workflows
//
process {

    publishDir = [
        path: { "${params.outdir}/${task.process.tokenize(':')[-1].tokenize('_')[0].toLowerCase()}" },
        mode: 'copy',
        saveAs: { filename -> filename.equals('versions.yml') ? null : filename }
    ]

    withName: CUSTOM_DUMPSOFTWAREVERSIONS {
        publishDir = [
            path: { "${params.outdir}/pipeline_info" },
            mode: 'copy',
            pattern: '*_versions.yml'
        ]
    }
    //
    //  Process options for local subworkflows
    //
    withName: 'NFCORE_CHIPSEQ:CHIPSEQ:INPUT_CHECK:SAMPLESHEET_CHECK' {
        publishDir = [
            path: { "${params.outdir}/pipeline_info" },
            mode: params.publish_dir_mode,
            saveAs: { filename -> filename.equals('versions.yml') ? null : filename }
        ]
    }
    withName: 'GUNZIP_.*' {
        publishDir = [
            path: { "${params.outdir}/genome" },
            mode: params.publish_dir_mode,
            saveAs: { filename -> filename.equals('versions.yml') ? null : filename },
            enabled: params.save_reference
        ]
    }
    // withName: 'UNTAR.*' {
    withName: 'UNTAR' {
        publishDir = [
            path: { "${params.outdir}/genome/index" },
            mode: params.publish_dir_mode,
            saveAs: { filename -> filename.equals('versions.yml') ? null : filename },
            enabled: params.save_reference
        ]
    }
        withName: BWA_INDEX {
        ext.args   = '-a bwtsw'
        publishDir = [
            path: { "${params.outdir}/genome/index" },
            mode: 'copy',
            saveAs: { filename -> filename.equals('versions.yml') ? null : filename }
        ]
    }
    withName: GFFREAD {
        ext.args   = '--keep-exon-attrs -F -T'
        publishDir = [
            path: { "${params.outdir}/genome" },
            mode: 'copy',
            saveAs: { filename -> filename.equals('versions.yml') ? null : filename },
            enabled: params.save_reference
        ]
    }
    withName: GTF2BED {
        publishDir = [
            path: { "${params.outdir}/genome" },
            mode: params.publish_dir_mode,
            saveAs: { filename -> filename.equals('versions.yml') ? null : filename },
            enabled: params.save_reference
        ]
    }
    withName: GET_CHROM_SIZES {
        publishDir = [
            path: { "${params.outdir}/genome" },
            mode: params.publish_dir_mode,
            saveAs: { filename -> filename.equals('versions.yml') ? null : filename },
            enabled: params.save_reference
        ]
    }
    withName: GENOME_BLACKLIST_REGIONS {
        publishDir = [
            path: { "${params.outdir}/genome" },
            mode: params.publish_dir_mode,
            saveAs: { filename -> filename.equals('versions.yml') ? null : filename },
            enabled: params.save_reference
        ]
    }


    withName: 'NFCORE_CHIPSEQ:CHIPSEQ:ALIGN_BWA_MEM:BAM_SORT_SAMTOOLS:SAMTOOLS_SORT' {
    // TODO: substitute by this line when multiple aligners are implemented
    // withName: 'NFCORE_CHIPSEQ:CHIPSEQ:.*:BAM_SORT_SAMTOOLS:SAMTOOLS_SORT' {
        ext.prefix = { "${meta.id}.Lb.sorted" }
        publishDir = [
            path: { "${params.outdir}/bwa/library" },
            mode: params.publish_dir_mode,
            pattern: "*.bam",
            enabled: params.save_align_intermeds
        ]
    }
    withName: 'NFCORE_CHIPSEQ:CHIPSEQ:ALIGN_BWA_MEM:BAM_SORT_SAMTOOLS:SAMTOOLS_INDEX' {
    // TODO: substitute by this line when multiple aligners are implemented
    // withName: 'NFCORE_CHIPSEQ:CHIPSEQ:.*:BAM_SORT_SAMTOOLS:SAMTOOLS_INDEX' {
        // ext.args   = params.bam_csi_index ? '-c' : ''
        ext.prefix = { "${meta.id}.Lb.sorted" }
        publishDir = [
            path: { "${params.outdir}/bwa/library" },
            mode: params.publish_dir_mode,
            pattern: '*.{bai,csi}',
            enabled: params.save_align_intermeds
        ]
    }
    withName: 'NFCORE_CHIPSEQ:CHIPSEQ:ALIGN_BWA_MEM:BAM_SORT_SAMTOOLS:BAM_STATS_SAMTOOLS:.*' {
    // TODO: substitute by this line when multiple aligners are implemented
    // withName: 'NFCORE_CHIPSEQ:CHIPSEQ:.*:BAM_SORT_SAMTOOLS:SAMTOOLS_STATS' {
        // ext.args   = params.bam_csi_index ? '-c' : ''
        ext.prefix = { "${meta.id}.Lb.sorted" }
        publishDir = [
            path: { "${params.outdir}/bwa/library" },
            mode: params.publish_dir_mode,
            pattern: "*.{stats,flagstat,idxstats}",
            enabled: params.save_align_intermeds
        ]
    }
    // withName: 'NFCORE_CHIPSEQ:CHIPSEQ:.*:BAM_SORT_SAMTOOLS:SAMTOOLS_INDEX' {
    //     ext.args   = params.bam_csi_index ? '-c' : ''
    //     publishDir = [
    //         path: { "${params.outdir}/${params.aligner}" },
    //         mode: params.publish_dir_mode,
    //         pattern: "*.{bam,csi}",
    //         enabled: ( ['star_salmon','hisat2'].contains(params.aligner) &&
    //             ( params.save_align_intermeds ||
    //                 ( !params.with_umi && params.skip_markduplicates )
    //             )
    //         ) || params.save_align_intermeds || params.skip_markduplicates
    //     ]
    // }
    // withName: 'NFCORE_CHIPSEQ:CHIPSEQ:.*:BAM_SORT_SAMTOOLS:BAM_STATS_SAMTOOLS:.*' {
    //     publishDir = [
    //         path: { "${params.outdir}/${params.aligner}/samtools_stats" },
    //         mode: params.publish_dir_mode,
    //         pattern: "*.{stats,flagstat,idxstats}"
    //     ]
    // }
// }

// process {

    // withName: TRIMGALORE {
    //     ext.args   = [
    //         '--fastqc',
    //         params.trim_nextseq > 0 ? "--nextseq ${params.trim_nextseq}" : ''
    //     ].join(' ').trim()
    //     publishDir = [
    //         [
    //             path: { "${params.outdir}/trimgalore/fastqc" },
    //             mode: copy,
    //             pattern: "*.{html,zip}"
    //         ],
    //         [
    //             path: { "${params.outdir}/trimgalore" },
    //             mode: copy,
    //             pattern: "*.fq.gz",
    //             enabled: params.save_trimmed
    //         ],
    //         [
    //             path: { "${params.outdir}/trimgalore" },
    //             mode: copy,
    //             pattern: "*.txt"
    //         ]
    //     ]
    // }
    withName: BWA_MEM {
        ext.args   = [
                        '-M',
                        params.bwa_min_score ? " -T ${params.bwa_min_score}" : ''
                    ].join(' ').trim()
        ext.args2  = '-h -F 0x0100 -O BAM'
        ext.prefix = { "${meta.id}.Lb" }
        publishDir = [
            path: { "${params.outdir}/bwa/library" },
            mode: 'copy',
            saveAs: { filename -> filename.equals('versions.yml') ? null : filename }
        ]
    }
    // withName: SAMTOOLS_SORT_LIB {
    //     ext.prefix = { "${meta.id}.Lb.sorted" }
    //     publishDir = [
    //         path: { "${params.outdir}/bwa/library" },
    //         mode: 'copy',
    //         saveAs: { filename -> filename.equals('versions.yml') ? null : filename }
    //     ]
    // }
    withName: PICARD_MERGESAMFILES {
        ext.args   = 'SORT_ORDER=coordinate VALIDATION_STRINGENCY=LENIENT TMP_DIR=tmp'
        ext.prefix = { "${meta.id}.mLb.sorted" }
        publishDir = [
            path: { "${params.outdir}/bwa/mergedLibrary" },
            mode: 'copy',
            saveAs: { filename -> filename.equals('versions.yml') ? null : filename }
        ]
    }
    // withName: PICARD_MARKDUPLICATES {
    //     ext.args   = 'ASSUME_SORTED=true REMOVE_DUPLICATES=false VALIDATION_STRINGENCY=LENIENT TMP_DIR=tmp'
    //     ext.prefix = { "${meta.id}.mLb.mkD.sorted" }
    //     publishDir = [
    //         path: { "${params.outdir}/bwa/mergedLibrary" },
    //         mode: 'copy',
    //         saveAs: { filename -> filename.equals('versions.yml') ? null : filename }
    //     ]
    // }
    withName: BAM_FILTER {
        ext.prefix = { "${meta.id}.mLb.flT.sorted" }
        publishDir = [
            path: { "${params.outdir}/bwa/mergedLibrary" },
            mode: 'copy',
            saveAs: { filename -> filename.equals('versions.yml') ? null : filename }
        ]
    }
    withName: BAM_REMOVE_ORPHANS {
        ext.args   = '--only_fr_pairs'
        ext.prefix = { "${meta.id}.mLb.clN" }
        publishDir = [
            path: { "${params.outdir}/bwa/mergedLibrary" },
            mode: 'copy',
            saveAs: { filename -> filename.equals('versions.yml') ? null : filename }
        ]
    }

    // withName: SAMTOOLS_SORT_FILTER { //FILTER_BAM_BAMTOOLS //delete
    withName: 'NFCORE_CHIPSEQ:CHIPSEQ:FILTER_BAM_BAMTOOLS:BAM_SORT_SAMTOOLS:SAMTOOLS_SORT' {
        ext.prefix = { "${meta.id}.mLb.clN.sorted" }
        publishDir = [
            path: { "${params.outdir}/bwa/mergedLibrary" },
            mode: 'copy',
            pattern: '*.{bai,csi}'
        ]
    }

    withName: 'NFCORE_CHIPSEQ:CHIPSEQ:FILTER_BAM_BAMTOOLS:BAM_SORT_SAMTOOLS:SAMTOOLS_INDEX' {
        ext.prefix = { "${meta.id}.mLb.clN.sorted" }
        publishDir = [
            path: { "${params.outdir}/bwa/mergedLibrary" },
            mode: 'copy',
            pattern: "*.bam"
        ]
    }

    withName: 'NFCORE_CHIPSEQ:CHIPSEQ:FILTER_BAM_BAMTOOLS:BAM_SORT_SAMTOOLS:BAM_STATS_SAMTOOLS:.*' {
        ext.prefix = { "${meta.id}.mLb.clN.sorted" }
        publishDir = [
            path: { "${params.outdir}/bwa/library" },
            mode: 'copy',
            pattern: "*.{stats,flagstat,idxstats}"
        ]
    }

    withName: PICARD_COLLECTMULTIPLEMETRICS {
        ext.args   = 'VALIDATION_STRINGENCY=LENIENT TMP_DIR=tmp'
        ext.prefix = { "${meta.id}.mLb.clN.sorted" }
        publishDir = [
            path: { "${params.outdir}/bwa/mergedLibrary/picard_metrics" },
            mode: 'copy',
            saveAs: { filename -> filename.equals('versions.yml') ? null : filename }
        ]
    }
    withName: PRESEQ_LCEXTRAP {
        ext.args   = '-verbose -bam -seed 1'
        ext.prefix = { "${meta.id}.mLb.clN" }
        publishDir = [
            path: { "${params.outdir}/bwa/mergedLibrary/preseq" },
            mode: 'copy',
            saveAs: { filename -> filename.equals('versions.yml') ? null : filename }
        ]
    }
    withName: PHANTOMPEAKQUALTOOLS {
        ext.prefix = { "${meta.id}.mLb.clN" }
        publishDir = [
            path: { "${params.outdir}/bwa/mergedLibrary/phantompeakqualtools" },
            mode: 'copy',
            saveAs: { filename -> filename.equals('versions.yml') ? null : filename }
        ]
    }
    withName: MULTIQC_CUSTOM_PHANTOMPEAKQUALTOOLS {
        publishDir = [
            path: { "${params.outdir}/multiqc" },
            enabled: false
        ]
    }
    withName: BEDTOOLS_GENOMECOV {
        ext.prefix = { "${meta.id}.mLb.clN" }
        publishDir = [
            path: { "${params.outdir}/bwa/mergedLibrary/bigwig" },
            mode: 'copy',
            saveAs: { filename -> filename.equals('versions.yml') ? null : filename }
        ]
    }
    withName: UCSC_BEDGRAPHTOBIGWIG {
        ext.prefix = { "${meta.id}.mLb.clN" }
        publishDir = [
            path: { "${params.outdir}/bwa/mergedLibrary/bigwig" },
            mode: 'copy',
            saveAs: { filename -> filename.equals('versions.yml') ? null : filename }
        ]
    }
    withName: DEEPTOOLS_COMPUTEMATRIX {
        ext.args   = 'scale-regions --regionBodyLength 1000 --beforeRegionStartLength 3000 --afterRegionStartLength 3000 --skipZeros --smartLabels'
        ext.prefix = { "${meta.id}.mLb.clN" }
        publishDir = [
            path: { "${params.outdir}/bwa/mergedLibrary/deeptools" },
            mode: 'copy',
            saveAs: { filename -> filename.equals('versions.yml') ? null : filename }
        ]
    }
    withName: DEEPTOOLS_PLOTPROFILE {
        ext.prefix = { "${meta.id}.mLb.clN" }
        publishDir = [
            path: { "${params.outdir}/bwa/mergedLibrary/deeptools" },
            mode: 'copy',
            saveAs: { filename -> filename.equals('versions.yml') ? null : filename }
        ]
    }
    withName: DEEPTOOLS_PLOTHEATMAP {
        ext.prefix = { "${meta.id}.mLb.clN" }
        publishDir = [
            path: { "${params.outdir}/bwa/mergedLibrary/deeptools" },
            mode: 'copy',
            saveAs: { filename -> filename.equals('versions.yml') ? null : filename }
        ]
    }
    withName: DEEPTOOLS_PLOTFINGERPRINT {
        ext.args   = [
            '--skipZeros',
            "--numberOfSamples $params.fingerprint_bins"
        ].join(' ').trim()
        ext.prefix = { "${meta.id}.mLb.clN" }
        publishDir = [
            path: { "${params.outdir}/bwa/mergedLibrary/deeptools" },
            mode: 'copy',
            saveAs: { filename -> filename.equals('versions.yml') ? null : filename }
        ]
    }
    // withName: DESEQ2_FEATURECOUNTS {
    //     publishDir = [
    //         path: { "${params.outdir}/bwa/mergedLibrary/macs2" },
    //         mode: 'copy',
    //         saveAs: { filename -> filename.equals('versions.yml') ? null : filename }
    //     ]
    // }

// }

// if (!params.skip_alignment && !params.skip_markduplicates) {
// process {
    // MARK_DUPLICATES_PICARD
    withName: '.*:MARK_DUPLICATES_PICARD:PICARD_MARKDUPLICATES' {
        ext.args   = 'ASSUME_SORTED=true REMOVE_DUPLICATES=false VALIDATION_STRINGENCY=LENIENT TMP_DIR=tmp'
        ext.prefix = { "${meta.id}.mLb.mkD.sorted" }
        publishDir = [
            [
                path: { "${params.outdir}/bwa/mergedLibrary" },
                mode: 'copy',
                pattern: '*metrics.txt'
            ],
            [
                path: { "${params.outdir}/bwa/mergedLibrary" },
                mode: 'copy',
                pattern: '*.bam'
            ]
        ]
    }

    withName: '.*:MARK_DUPLICATES_PICARD:SAMTOOLS_INDEX' {
        // ext.args   = params.bam_csi_index ? '-c' : '' // TODO implement it
        ext.prefix = { "${meta.id}.mkD.sorted" }
        publishDir = [
            path: { "${params.outdir}/bwa/mergedLibrary" },
            mode: 'copy',
            pattern: '*.{bai,csi}'
        ]
    }

    withName: '.*:MARK_DUPLICATES_PICARD:BAM_STATS_SAMTOOLS:.*' {
        publishDir = [
            path: { "${params.outdir}/${params.aligner}/samtools_stats" },
            mode: 'copy',
            pattern: '*.{stats,flagstat,idxstats}'
        ]
    }
// }
}

if (!params.skip_fastqc) {
    process {
        withName: FASTQC {
                ext.args = '--quiet'
            }
    }
}

// here
if (params.macs_gsize) {
    process {
        withName: MACS2_CALLPEAK {
            ext.args   = [
                '--keep-dup all',
                params.narrow_peak      ? '' : "--broad --broad-cutoff ${params.broad_cutoff}",
                params.save_macs_pileup ? '--bdg --SPMR' : '',
                params.macs_fdr         ? "--pvalue ${params.macs_pvalue}" : '',
                params.macs_pvalue      ? "--qvalue ${params.macs_fdr}" : ''
            ].join(' ').trim()
            publishDir = [
                path: { [
                    "${params.outdir}/bwa/mergedLibrary/macs2",
                    params.narrow_peak? '/narrowPeak' : '/broadPeak'
                    ].join('') },
                mode: 'copy',
                saveAs: { filename -> filename.equals('versions.yml') ? null : filename }
            ]
        }
        withName: FRIP_SCORE {
            ext.args   = '-bed -c -f 0.20'
            publishDir = [
                path: { "${params.outdir}/frip" },
                enable: false
            ]
        }
        withName: MULTIQC_CUSTOM_PEAKS {
            publishDir = [
                path: { "${params.outdir}/multiqc" },
                enabled: false
            ]
        }
        withName: PLOT_MACS2_QC {
            ext.args   = '-o ./ -p macs2_peak'
            publishDir = [
                path: { [
                        "${params.outdir}/bwa/mergedLibrary/macs2",
                        params.narrow_peak? '/narrowPeak' : '/broadPeak'
                        ].join('') },
                mode: 'copy',
                saveAs: { filename -> filename.equals('versions.yml') ? null : filename }
            ]
        }
        withName: HOMER_ANNOTATEPEAKS_MACS2 {
            ext.args   = '-gid'
            // ext.prefix = 'peaks'
            publishDir = [
                path: { [
                        "${params.outdir}/bwa/mergedLibrary/macs2",
                        params.narrow_peak? '/narrowPeak' : '/broadPeak'
                        ].join('') },
                mode: 'copy',
                saveAs: { filename -> filename.equals('versions.yml') ? null : filename }
            ]
        }
        withName: PLOT_HOMER_ANNOTATEPEAKS {
            ext.args   = '-o ./ -p macs2_annotatePeaks'
            publishDir = [
                path: { [
                        "${params.outdir}/bwa/mergedLibrary/macs2",
                        params.narrow_peak? '/narrowPeak' : '/broadPeak'
                        ].join('') },
                mode: 'copy',
                saveAs: { filename -> filename.equals('versions.yml') ? null : filename }
            ]
        }
        withName: MACS2_CONSENSUS {
            publishDir = [
                path: { [
                        "${params.outdir}/bwa/mergedLibrary/macs2",
                        params.narrow_peak? '/narrowPeak' : '/broadPeak'
                        ].join('') },
                mode: 'copy',
                saveAs: { filename -> filename.equals('versions.yml') ? null : filename }
            ]
        }
        withName: HOMER_ANNOTATEPEAKS_CONSENSUS {
            ext.args   = '-gid'
            ext.prefix = 'consensus_peaks'
            publishDir = [
                path: { [
                        "${params.outdir}/bwa/mergedLibrary/macs2",
                        params.narrow_peak? '/narrowPeak' : '/broadPeak'
                        ].join('') },
                mode: 'copy',
                saveAs: { filename -> filename.equals('versions.yml') ? null : filename }
            ]
        }

        withName: SUBREAD_FEATURECOUNTS  {
            ext.args   = '-F SAF -O --fracOverlap 0.2'
            publishDir = [
                path: { [
                        "${params.outdir}/bwa/mergedLibrary/macs2",
                        params.narrow_peak? '/narrowPeak' : '/broadPeak'
                        ].join('') },
                mode: 'copy',
                saveAs: { filename -> filename.equals('versions.yml') ? null : filename }
            ]
        }
    }
}

if (!params.skip_multiqc) {
    process {
        withName: MULTIQC {
            ext.args   = params.multiqc_title ? "--title \"$params.multiqc_title\"" : ''
            publishDir = [
                path: { [
                    "${params.outdir}/bwa/mergedLibrary/macs2",
                    params.narrow_peak? '/narrowPeak' : '/broadPeak'
                    ].join('') },
                mode: 'copy',
                saveAs: { filename -> filename.equals('versions.yml') ? null : filename }
            ]
        }
    }
}

// params {
//     modules {
//         'gffread' {
//             args            = '--keep-exon-attrs -F -T'
//             publish_dir     = 'genome'
//         }
//         'bwa_index' {
//             args            = "-a bwtsw"
//             publish_dir     = "genome/index"
//         }
//         'fastqc' {
//             args            = "--quiet"
//         }
//         'trimgalore' {
//             args            = "--fastqc"
//         }
//         'bwa_mem' {
//             args            = "-M"
//             args2           = "-h -F 0x0100 -O BAM"
//             publish_dir     = "bwa/library"
//             suffix          = ".Lb"
//         }
//         'samtools_sort_lib' { // ALIGN_BWA_MEM
//             publish_dir     = "bwa/library"
//             suffix          = ".Lb.sorted"
//         }
//         'picard_mergesamfiles' {
//             args            = "SORT_ORDER=coordinate VALIDATION_STRINGENCY=LENIENT TMP_DIR=tmp"
//             publish_dir     = "bwa/mergedLibrary"
//             suffix          = ".mLb.sorted"
//         }
//         'picard_markduplicates' {
//             args            = "--ASSUME_SORTED true --REMOVE_DUPLICATES false --VALIDATION_STRINGENCY LENIENT --TMP_DIR tmp"
//             publish_dir     = "bwa/mergedLibrary"
//             suffix          = ".mLb.mkD.sorted"
//         }
//         'picard_markduplicates_samtools' { //MARK_DUPLICATES_PICARD
//             args            = ''
//             suffix          = ".mLb.mkD.sorted"
//             publish_files   = ['bai':'', 'stats':'samtools_stats', 'flagstat':'samtools_stats', 'idxstats':'samtools_stats']
//             publish_dir     = "bwa/mergedLibrary"
//         }
//         'bam_filter' {
//             publish_dir     = "bwa/mergedLibrary"
//             suffix          = ".mLb.flT.sorted"
//         }
//         'bam_remove_orphans' {
//             args            = "--only_fr_pairs"
//             publish_dir     = "bwa/mergedLibrary"
//             suffix          = ".mLb.clN"
//         }
//         'samtools_sort_filter' { //FILTER_BAM_BAMTOOLS
//             publish_dir     = "bwa/mergedLibrary"
//             suffix          = ".mLb.clN.sorted"
//         }
//         'picard_collectmultiplemetrics' {
//             args            = "VALIDATION_STRINGENCY=LENIENT TMP_DIR=tmp"
//             publish_dir     = "bwa/mergedLibrary/picard_metrics"
//             suffix          = ".mLb.clN.sorted"
//         }
//         'preseq_lcextrap' {
//             args            = "-verbose -bam -seed 1"
//             publish_dir     = "bwa/mergedLibrary/preseq"
//             suffix          = ".mLb.clN"
//         }
//         'phantompeakqualtools' {
//             publish_dir     = "bwa/mergedLibrary/phantompeakqualtools"
//             suffix          = ".mLb.clN"
//         }
//         'multiqc_custom_phantompeakqualtools' {
//             publish_dir     = "multiqc"
//             publish_files   = [:]
//         }
//         'bedtools_genomecov' {
//             publish_dir     = "bwa/mergedLibrary/bigwig"
//             suffix          = ".mLb.clN"
//         }
//         'ucsc_bedgraphtobigwig' {
//             publish_dir     = "bwa/mergedLibrary/bigwig"
//             suffix          = ".mLb.clN"
//         }
//         'deeptools_computematrix' {
//             args            = "scale-regions --regionBodyLength 1000 --beforeRegionStartLength 3000 --afterRegionStartLength 3000 --skipZeros --smartLabels"
//             publish_dir     = "bwa/mergedLibrary/deeptools"
//             suffix          = ".mLb.clN"
//         }
//         'deeptools_plotprofile' {
//             publish_dir     = "bwa/mergedLibrary/deeptools"
//             suffix          = ".mLb.clN"
//         }
//         'deeptools_plotheatmap' {
//             publish_dir     = "bwa/mergedLibrary/deeptools"
//             suffix          = ".mLb.clN"
//         }
//         'deeptools_plotfingerprint' {
//             args            = "--skipZeros"
//             publish_dir     = "bwa/mergedLibrary/deeptools"
//             suffix          = ".mLb.clN"
//         }
//         'macs2_callpeak' {
//             args            = "--keep-dup all"
//             publish_dir     = "bwa/mergedLibrary/macs2"
//         }
//         'frip_score' {
//             args            = "-bed -c -f 0.20"
//             publish_dir     = "frip"
//             publish_files   = [:]
//         }
//         'multiqc_custom_peaks' {
//             publish_dir     = "multiqc"
//             publish_files   = [:]
//         }
//         'plot_macs2_qc' {
//             args            = "-o ./ -p macs2_peak"
//             publish_dir     = "bwa/mergedLibrary/macs2"
//         }
//         'homer_annotatepeaks_macs2' {
//             args            = "-gid"
//             publish_dir     = "bwa/mergedLibrary/macs2"
//             suffix          = "_peaks"
//         }
//         'plot_homer_annotatepeaks' {
//             args            = "-o ./ -p macs2_annotatePeaks"
//             publish_dir     = "bwa/mergedLibrary/macs2"
//         }
//         'macs2_consensus' {
//             publish_dir     = "bwa/mergedLibrary/macs2"
//             publish_by_id   = true
//         }
//         'homer_annotatepeaks_consensus' {
//             args            = "-gid"
//             publish_dir     = "bwa/mergedLibrary/macs2"
//             publish_by_id   = true
//             suffix          = ".consensus_peaks"
//         }
//         'subread_featurecounts' {
//             args            = "-F SAF -O --fracOverlap 0.2"
//             publish_dir     = "bwa/mergedLibrary/macs2"
//         }
//         'deseq2_featurecounts' {
//             publish_dir     = "bwa/mergedLibrary/macs2"
//         }
//         'multiqc' {
//             args            = ''
//             publish_dir     = "multiqc"
//         }
//     }
// }

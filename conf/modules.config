/*
========================================================================================
    Config file for defining DSL2 per module options and publishing paths
========================================================================================
    Available keys to override module options:
        ext.args            = Additional arguments appended to command in module.
        ext.args2           = Second set of arguments appended to command in module (multi-tool modules).
        ext.args3           = Third set of arguments appended to command in module (multi-tool modules).
        ext.prefix          = File name prefix for output files.
---------------------------------------------------------------------------------------------------------
*/

//
// General configuration options
//

process {
    publishDir = [
        path: { "${params.outdir}/${task.process.tokenize(':')[-1].tokenize('_')[0].toLowerCase()}" },
        mode: 'copy',
        saveAs: { filename -> filename.equals('versions.yml') ? null : filename }
    ]

    withName: 'NFCORE_CHIPSEQ:CHIPSEQ:INPUT_CHECK:SAMPLESHEET_CHECK' {
        publishDir = [
            path: { "${params.outdir}/pipeline_info" },
            mode: 'copy',
            saveAs: { filename -> filename.equals('versions.yml') ? null : filename }
        ]
    }

    withName: CUSTOM_DUMPSOFTWAREVERSIONS {
        publishDir = [
            path: { "${params.outdir}/pipeline_info" },
            mode: 'copy',
            pattern: '*_versions.yml'
        ]
    }
}

//
// Genome preparation options
//

process {
    withName: 'GUNZIP_.*' {
        publishDir = [
            path: { "${params.outdir}/genome" },
            mode: 'copy',
            saveAs: { filename -> filename.equals('versions.yml') ? null : filename },
            enabled: params.save_reference
        ]
    }
    // withName: 'UNTAR_.*' {
    withName: 'UNTAR' {
        publishDir = [
            path: { "${params.outdir}/genome/index" },
            mode: 'copy',
            saveAs: { filename -> filename.equals('versions.yml') ? null : filename },
            enabled: params.save_reference
        ]
    }
    withName: GFFREAD {
        ext.args   = '--keep-exon-attrs -F -T'
        publishDir = [
            path: { "${params.outdir}/genome" },
            mode: 'copy',
            saveAs: { filename -> filename.equals('versions.yml') ? null : filename },
            enabled: params.save_reference
        ]
    }
    withName: GTF2BED {
        publishDir = [
            path: { "${params.outdir}/genome" },
            mode: 'copy',
            saveAs: { filename -> filename.equals('versions.yml') ? null : filename },
            enabled: params.save_reference
        ]
    }
    withName: CUSTOM_GETCHROMSIZES {
        publishDir = [
            path: { "${params.outdir}/genome" },
            mode: 'copy',
            saveAs: { filename -> filename.equals('versions.yml') ? null : filename },
            enabled: params.save_reference
        ]
    }
    withName: GENOME_BLACKLIST_REGIONS {
        publishDir = [
            path: { "${params.outdir}/genome" },
            mode: 'copy',
            saveAs: { filename -> filename.equals('versions.yml') ? null : filename },
            enabled: params.save_reference
        ]
    }
}

//
// Read QC and trimming options
//

if (!(params.skip_fastqc || params.skip_qc)) {
    process {
        withName: '.*:FASTQC_TRIMGALORE:FASTQC' {
            ext.args = '--quiet'
        }
    }
}

if (!params.skip_trimming) {
    process {
        withName: '.*:FASTQC_TRIMGALORE:TRIMGALORE' {
            ext.args   = [
                '--fastqc',
                params.trim_nextseq > 0 ? "--nextseq ${params.trim_nextseq}" : ''
            ].join(' ').trim()
            publishDir = [
                [
                    path: { "${params.outdir}/trimgalore/fastqc" },
                    mode: 'copy',
                    pattern: "*.{html,zip}"
                ],
                [
                    path: { "${params.outdir}/trimgalore" },
                    mode: 'copy',
                    pattern: "*.fq.gz",
                    enabled: params.save_trimmed
                ],
                [
                    path: { "${params.outdir}/trimgalore" },
                    mode: 'copy',
                    pattern: "*.txt"
                ]
            ]
        }
    }
}

process {
    withName: 'NFCORE_CHIPSEQ:CHIPSEQ:.*:BAM_SORT_SAMTOOLS:SAMTOOLS_SORT' {
        ext.prefix = { "${meta.id}.Lb.sorted" }
        publishDir = [
            path: { "${params.outdir}/bwa/library" },
            mode: 'copy',
            pattern: "*.bam",
            enabled: params.save_align_intermeds
        ]
    }
    withName: 'NFCORE_CHIPSEQ:CHIPSEQ:.*:BAM_SORT_SAMTOOLS:SAMTOOLS_INDEX' {
        // ext.args   = params.bam_csi_index ? '-c' : ''
        ext.prefix = { "${meta.id}.Lb.sorted" }
        publishDir = [
            path: { "${params.outdir}/bwa/library" },
            mode: 'copy',
            pattern: '*.{bai,csi}',
            enabled: params.save_align_intermeds
        ]
    }
    withName: 'NFCORE_CHIPSEQ:CHIPSEQ:.*:BAM_SORT_SAMTOOLS:BAM_STATS_SAMTOOLS:SAMTOOLS_STATS' {
        // ext.args   = params.bam_csi_index ? '-c' : ''
        ext.prefix = { "${meta.id}.Lb.sorted" }
        publishDir = [
            path: { "${params.outdir}/bwa/library" },
            mode: 'copy',
            pattern: "*.{stats,flagstat,idxstats}",
            enabled: params.save_align_intermeds
        ]
    }
}

if (params.aligner == 'bwa') {
    process {
        withName: BWA_INDEX {
            ext.args   = '-a bwtsw'
            publishDir = [
                path: { "${params.outdir}/genome/${params.aligner}/index" },
                mode: 'copy',
                saveAs: { filename -> filename.equals('versions.yml') ? null : filename }
            ]
        }
        withName: BWA_MEM {
            ext.args   = [
                            '-M',
                            params.bwa_min_score ? " -T ${params.bwa_min_score}" : ''
                        ].join(' ').trim()
            ext.args2  = '-h -F 0x0100 -O BAM'
            ext.prefix = { "${meta.id}.Lb" }
            publishDir = [
                path: { "${params.outdir}/${params.aligner}/library" },
                mode: 'copy',
                saveAs: { filename -> filename.equals('versions.yml') ? null : filename }
            ]
        }
    }
}

if (params.aligner == 'bowtie2') {
    process {
        withName: BOWTIE2_BUILD {
            ext.args   = ''
            publishDir = [
                path: { "${params.outdir}/genome/${params.aligner}/index" },
                mode: 'copy',
                saveAs: { filename -> filename.equals('versions.yml') ? null : filename }
            ]
        }
        withName: BOWTIE2_ALIGN {
            ext.args   = ''
            ext.prefix = { "${meta.id}.Lb" }
            publishDir = [
                path: { "${params.outdir}/${params.aligner}/library" },
                mode: 'copy',
                saveAs: { filename -> filename.equals('versions.yml') ? null : filename }
            ]
        }
    }
}

if (params.aligner == 'star') {
    process {
        withName: STAR_GENOMEGENERATE {
            ext.args   = ''
            publishDir = [
                path: { "${params.outdir}/genome/${params.aligner}/index" },
                mode: 'copy',
                saveAs: { filename -> filename.equals('versions.yml') ? null : filename }
            ]
        }
        withName: '.*:ALIGN_STAR:STAR_ALIGN' {
            ext.args   = [
                '--runMode alignReads',
                '--alignIntronMax 1',
                '--alignEndsType EndToEnd',
                '--outSAMtype BAM Unsorted',
                '--readFilesCommand zcat',
                '--runRNGseed 0',
                '--outSAMattributes NH HI AS NM MD',
                params.save_unaligned ? '--outReadsUnmapped Fastx' : ''
            ].join(' ').trim()
            publishDir = [
                [
                    path: { "${params.outdir}/${params.aligner}/log" },
                    mode: 'copy',
                    pattern: '*.{out,tab}'
                ],
                [
                    path: { "${params.outdir}/${params.aligner}" },
                    mode: 'copy',
                    pattern: '*.bam',
                    // TODO
                    // enabled: params.save_align_intermeds
                    enabled: false
                ],
                [
                    path: { "${params.outdir}/${params.aligner}/unmapped" },
                    mode: 'copy',
                    pattern: '*.fastq.gz',
                    enabled: params.save_unaligned
                ]
            ]
        }
    }
}

process {
    withName: PICARD_MERGESAMFILES {
        ext.args   = 'SORT_ORDER=coordinate VALIDATION_STRINGENCY=LENIENT TMP_DIR=tmp'
        ext.prefix = { "${meta.id}.mLb.sorted" }
        publishDir = [
            path: { "${params.outdir}/bwa/mergedLibrary" },
            mode: 'copy',
            saveAs: { filename -> filename.equals('versions.yml') ? null : filename }
        ]
    }
    withName: '.*:MARK_DUPLICATES_PICARD:PICARD_MARKDUPLICATES' {
        ext.args   = 'ASSUME_SORTED=true REMOVE_DUPLICATES=false VALIDATION_STRINGENCY=LENIENT TMP_DIR=tmp'
        ext.prefix = { "${meta.id}.mLb.mkD.sorted" }
        publishDir = [
            [
                path: { "${params.outdir}/bwa/mergedLibrary" },
                mode: 'copy',
                pattern: '*metrics.txt'
            ],
            [
                path: { "${params.outdir}/bwa/mergedLibrary" },
                mode: 'copy',
                pattern: '*.bam'
            ]
        ]
    }
    withName: '.*:MARK_DUPLICATES_PICARD:SAMTOOLS_INDEX' {
        // ext.args   = params.bam_csi_index ? '-c' : '' // TODO implement it
        ext.prefix = { "${meta.id}.mkD.sorted" }
        publishDir = [
            path: { "${params.outdir}/bwa/mergedLibrary" },
            mode: 'copy',
            pattern: '*.{bai,csi}'
        ]
    }
    withName: '.*:MARK_DUPLICATES_PICARD:BAM_STATS_SAMTOOLS:.*' {
        publishDir = [
            path: { "${params.outdir}/bwa/samtools_stats" },
            mode: 'copy',
            pattern: '*.{stats,flagstat,idxstats}'
        ]
    }
    withName: BAM_FILTER {
        ext.prefix = { "${meta.id}.mLb.flT.sorted" }
        publishDir = [
            path: { "${params.outdir}/bwa/mergedLibrary" },
            mode: 'copy',
            saveAs: { filename -> filename.equals('versions.yml') ? null : filename }
        ]
    }
    withName: BAM_REMOVE_ORPHANS {
        ext.args   = '--only_fr_pairs'
        ext.prefix = { "${meta.id}.mLb.clN" }
        publishDir = [
            path: { "${params.outdir}/bwa/mergedLibrary" },
            mode: 'copy',
            saveAs: { filename -> filename.equals('versions.yml') ? null : filename }
        ]
    }
    withName: 'NFCORE_CHIPSEQ:CHIPSEQ:FILTER_BAM_BAMTOOLS:BAM_SORT_SAMTOOLS:SAMTOOLS_SORT' {
        ext.prefix = { "${meta.id}.mLb.clN.sorted" }
        publishDir = [
            path: { "${params.outdir}/bwa/mergedLibrary" },
            mode: 'copy',
            pattern: '*.{bai,csi}'
        ]
    }
    withName: 'NFCORE_CHIPSEQ:CHIPSEQ:FILTER_BAM_BAMTOOLS:BAM_SORT_SAMTOOLS:SAMTOOLS_INDEX' {
        ext.prefix = { "${meta.id}.mLb.clN.sorted" }
        publishDir = [
            path: { "${params.outdir}/bwa/mergedLibrary" },
            mode: 'copy',
            pattern: "*.bam"
        ]
    }
    withName: 'NFCORE_CHIPSEQ:CHIPSEQ:FILTER_BAM_BAMTOOLS:BAM_SORT_SAMTOOLS:BAM_STATS_SAMTOOLS:.*' {
        ext.prefix = { "${meta.id}.mLb.clN.sorted" }
        publishDir = [
            path: { "${params.outdir}/bwa/library" },
            mode: 'copy',
            pattern: "*.{stats,flagstat,idxstats}"
        ]
    }
    withName: PHANTOMPEAKQUALTOOLS {
        ext.prefix = { "${meta.id}.mLb.clN" }
        publishDir = [
            path: { "${params.outdir}/bwa/mergedLibrary/phantompeakqualtools" },
            mode: 'copy',
            saveAs: { filename -> filename.equals('versions.yml') ? null : filename }
        ]
    }
    withName: MULTIQC_CUSTOM_PHANTOMPEAKQUALTOOLS {
        publishDir = [
            path: { "${params.outdir}/multiqc" },
            enabled: false
        ]
    }
    withName: BEDTOOLS_GENOMECOV {
        ext.prefix = { "${meta.id}.mLb.clN" }
        publishDir = [
            path: { "${params.outdir}/bwa/mergedLibrary/bigwig" },
            mode: 'copy',
            saveAs: { filename -> filename.equals('versions.yml') ? null : filename }
        ]
    }
    withName: UCSC_BEDGRAPHTOBIGWIG {
        ext.prefix = { "${meta.id}.mLb.clN" }
        publishDir = [
            path: { "${params.outdir}/bwa/mergedLibrary/bigwig" },
            mode: 'copy',
            saveAs: { filename -> filename.equals('versions.yml') ? null : filename }
        ]
    }
}

if (!params.skip_picard_metrics) {
    process {
        withName: PICARD_COLLECTMULTIPLEMETRICS {
            ext.args   = 'VALIDATION_STRINGENCY=LENIENT TMP_DIR=tmp'
            ext.prefix = { "${meta.id}.mLb.clN.sorted" }
            publishDir = [
                path: { "${params.outdir}/bwa/mergedLibrary/picard_metrics" },
                mode: 'copy',
                saveAs: { filename -> filename.equals('versions.yml') ? null : filename }
            ]
        }
    }
}

if (!params.skip_preseq) {
    process {
        withName: PRESEQ_LCEXTRAP {
            ext.args   = '-verbose -bam -seed 1'
            ext.prefix = { "${meta.id}.mLb.clN" }
            publishDir = [
                path: { "${params.outdir}/bwa/mergedLibrary/preseq" },
                mode: 'copy',
                saveAs: { filename -> filename.equals('versions.yml') ? null : filename }
            ]
        }
    }
}

if (!params.skip_plot_profile) {
    process {
        withName: DEEPTOOLS_COMPUTEMATRIX {
            ext.args   = 'scale-regions --regionBodyLength 1000 --beforeRegionStartLength 3000 --afterRegionStartLength 3000 --skipZeros --smartLabels'
            ext.prefix = { "${meta.id}.mLb.clN" }
            publishDir = [
                path: { "${params.outdir}/bwa/mergedLibrary/deeptools" },
                mode: 'copy',
                saveAs: { filename -> filename.equals('versions.yml') ? null : filename }
            ]
        }
        withName: DEEPTOOLS_PLOTPROFILE {
            ext.prefix = { "${meta.id}.mLb.clN" }
            publishDir = [
                path: { "${params.outdir}/bwa/mergedLibrary/deeptools" },
                mode: 'copy',
                saveAs: { filename -> filename.equals('versions.yml') ? null : filename }
            ]
        }
        withName: DEEPTOOLS_PLOTHEATMAP {
            ext.prefix = { "${meta.id}.mLb.clN" }
            publishDir = [
                path: { "${params.outdir}/bwa/mergedLibrary/deeptools" },
                mode: 'copy',
                saveAs: { filename -> filename.equals('versions.yml') ? null : filename }
            ]
        }
    }
}

if (!params.skip_plot_fingerprint) {
    process {
        withName: DEEPTOOLS_PLOTFINGERPRINT {
            ext.args   = [
                '--skipZeros',
                "--numberOfSamples $params.fingerprint_bins"
            ].join(' ').trim()
            ext.prefix = { "${meta.id}.mLb.clN" }
            publishDir = [
                path: { "${params.outdir}/bwa/mergedLibrary/deeptools" },
                mode: 'copy',
                saveAs: { filename -> filename.equals('versions.yml') ? null : filename }
            ]
        }
    }
}

if (params.macs_gsize) {
    process {
        withName: MACS2_CALLPEAK {
            ext.args   = [
                '--keep-dup all',
                params.narrow_peak      ? '' : "--broad --broad-cutoff ${params.broad_cutoff}",
                params.save_macs_pileup ? '--bdg --SPMR' : '',
                params.macs_fdr         ? "--pvalue ${params.macs_pvalue}" : '',
                params.macs_pvalue      ? "--qvalue ${params.macs_fdr}" : ''
            ].join(' ').trim()
            publishDir = [
                path: { [
                    "${params.outdir}/bwa/mergedLibrary/macs2",
                    params.narrow_peak? '/narrowPeak' : '/broadPeak'
                    ].join('') },
                mode: 'copy',
                saveAs: { filename -> filename.equals('versions.yml') ? null : filename }
            ]
        }
        withName: FRIP_SCORE {
            ext.args   = '-bed -c -f 0.20'
            publishDir = [
                path: { "${params.outdir}/frip" },
                enable: false
            ]
        }
        withName: MULTIQC_CUSTOM_PEAKS {
            publishDir = [
                path: { "${params.outdir}/multiqc" },
                enabled: false
            ]
        }
    }

    if (!params.skip_peak_annotation && !params.skip_peak_qc) {
        process {
            withName: PLOT_MACS2_QC {
                ext.args   = '-o ./ -p macs2_peak'
                publishDir = [
                    path: { [
                            "${params.outdir}/bwa/mergedLibrary/macs2",
                            params.narrow_peak? '/narrowPeak' : '/broadPeak'
                            ].join('') },
                    mode: 'copy',
                    saveAs: { filename -> filename.equals('versions.yml') ? null : filename }
                ]
            }
            withName: HOMER_ANNOTATEPEAKS_MACS2 {
                ext.args   = '-gid'
                // ext.prefix = 'peaks'
                publishDir = [
                    path: { [
                            "${params.outdir}/bwa/mergedLibrary/macs2",
                            params.narrow_peak? '/narrowPeak' : '/broadPeak'
                            ].join('') },
                    mode: 'copy',
                    saveAs: { filename -> filename.equals('versions.yml') ? null : filename }
                ]
            }
            withName: PLOT_HOMER_ANNOTATEPEAKS {
                ext.args   = '-o ./ -p macs2_annotatePeaks'
                publishDir = [
                    path: { [
                            "${params.outdir}/bwa/mergedLibrary/macs2",
                            params.narrow_peak? '/narrowPeak' : '/broadPeak'
                            ].join('') },
                    mode: 'copy',
                    saveAs: { filename -> filename.equals('versions.yml') ? null : filename }
                ]
            }
        }
    }

    if (!params.skip_consensus_peaks) {
        process {
            withName: MACS2_CONSENSUS {
                ext.prefix = { "${meta.id}.consensus_peaks" }
                publishDir = [
                    path: { [
                            "${params.outdir}/bwa/mergedLibrary/macs2",
                            params.narrow_peak? '/narrowPeak' : '/broadPeak'
                            ].join('') },
                    mode: 'copy',
                    saveAs: { filename -> filename.equals('versions.yml') ? null : filename }
                ]
            }
            withName: SUBREAD_FEATURECOUNTS  {
                ext.args   = '-F SAF -O --fracOverlap 0.2'
                publishDir = [
                    path: { [
                            "${params.outdir}/bwa/mergedLibrary/macs2",
                            params.narrow_peak? '/narrowPeak' : '/broadPeak'
                            ].join('') },
                    mode: 'copy',
                    saveAs: { filename -> filename.equals('versions.yml') ? null : filename }
                ]
            }
        }
    }

    if (!params.skip_peak_annotation) {
        process {
            withName: HOMER_ANNOTATEPEAKS_CONSENSUS {
                ext.args   = '-gid'
                ext.prefix = 'consensus_peaks'
                publishDir = [
                    path: { [
                            "${params.outdir}/bwa/mergedLibrary/macs2",
                            params.narrow_peak? '/narrowPeak' : '/broadPeak'
                            ].join('') },
                    mode: 'copy',
                    saveAs: { filename -> filename.equals('versions.yml') ? null : filename }
                ]
            }
        }
    }

    // if (!params.skip_diff_analysis) {
    //     process {
    //         withName: DESEQ2_FEATURECOUNTS {
    //             publishDir = [
    //                 path: { "${params.outdir}/bwa/mergedLibrary/macs2" },
    //                 mode: 'copy',
    //                 saveAs: { filename -> filename.equals('versions.yml') ? null : filename }
    //             ]
    //         }
    //     }
    // }

    if (!params.skip_igv) {
        process {
            withName: IGV {
                publishDir = [
                        path: { [
                                "${params.outdir}/igv",
                                params.narrow_peak? '/narrowPeak' : '/broadPeak'
                                ].join('') },
                        mode: 'copy',
                        saveAs: { filename -> filename.equals('versions.yml') ? null : filename }
                ]
            }
        }
    }
}

if (!params.skip_multiqc) {
    process {
        withName: MULTIQC {
            ext.args   = params.multiqc_title ? "--title \"$params.multiqc_title\"" : ''
            publishDir = [
                path: { "${params.outdir}/multiqc" },
                mode: 'copy',
                saveAs: { filename -> filename.equals('versions.yml') ? null : filename }
            ]
        }
    }
}
